generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String   @id
  userId                   String   @unique(map: "Account_userId_key")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  user                     user     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model issue {
  id               Int             @id @default(autoincrement())
  title            String          @db.VarChar(255)
  description      String?         @db.Text
  status           issue_status    @default(OPEN)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  assignedToUserId String?         @db.VarChar(255)
  issueType        issue_issueType @default(GENERAL)
  projectId        Int?
  user             user?           @relation(fields: [assignedToUserId], references: [id], map: "Issue_assignedToUserId_fkey")
  project          project?        @relation(fields: [projectId], references: [id], map: "Issue_projectId_fkey")

  @@index([assignedToUserId], map: "Issue_assignedToUserId_fkey")
  @@index([projectId], map: "Issue_projectId_fkey")
}

model project {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  issue       issue[]
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_idx")
}

model user {
  id            String    @id
  name          String?
  username      String?   @unique(map: "User_username_key")
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  account       account?
  issue         issue[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum issue_status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum issue_issueType {
  GENERAL
  BUG
  SPIKE
  TASK
  SUBTASK
}
